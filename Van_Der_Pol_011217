#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 12 12:53:14 2017

@author: alfermaa
"""

import numpy as np
import scipy as sci
import pylab as pyl
import matplotlib.font_manager as fnt


def dydx(y, x, eta):
    # Unpack the y vector
    y1, y2 = y

    # Create dydx vector (y1', y2')
    f = [y2, eta*y2 - y1 - eta*y2*y1**2]
    return f

# Define the range of the computation
xstart = 0
xstop = 3000
dx = 1.0e-0

# Equation parameters
eta = 1.e3

# Initial conditions
y1zero = 2
y2zero = 0

# ODE Solver parameters
abserr = 1.0e-8
relerr = 1.0e-6

# Create the range of points along x to integrate
x_list = np.arange(xstart, xstop + 0.5*dx, dx)

# Pack up the parameters to send to the integrator
y = [y1zero, y2zero]

# Call the integrator
solution = sci.integrate.odeint(dydx, y, x_list, args=(eta,),
                                atol=abserr, rtol=relerr)

# Generate the solution values
y1sol = []
y2sol = []
for i in range(len(solution)):
    y1sol.append(solution[i][0])
    y2sol.append(solution[i][1])

# Plot the solution
for p in range(1, 3):
    pyl.figure(p, figsize=(6, 4.5), dpi=400)
    pyl.xlabel('x Value')
    pyl.grid(True)
    pyl.hold(True)
#    pyl.xlim(807.05,807.07)

lw = 1

pyl.figure(1)
pyl.ylabel('y1 Value')
pyl.plot(x_list, y1sol, 'b', linewidth=lw)
pyl.title('Solution Component')

pyl.figure(2)
pyl.ylabel('y2 Value')
pyl.plot(x_list, y2sol, 'b', linewidth=lw)
pyl.title('Derivative Value')

pyl.show()
