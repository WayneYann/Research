#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  7 17:47:34 2016

@author: andrewalferman
"""

import numpy as np
import matplotlib.pyplot as plt


def functionone(p, b, x):
    y, ydot = np.zeros(2), np.zeros(2)
    a, n = p
    y[0] = np.exp(-1 * a * n * x)
    y[1] = np.exp(-1 * a * x)
    ydot[0] = -(b + a*n) * y[0] + b * y[1]**n
    ydot[1] = y[0] - a*y[1] - y[1]**n
    return ydot, y


# The next two functions are not really needed for right now but will likely
# come in handy later.
def fwdeuler():
    pass


def rk4(f):
    return lambda t, y, dt: (
                    lambda dy1: (
                        lambda dy2: (
                            lambda dy3: (
                                lambda dy4: (dy1 + 2*dy2 + 2*dy3 + dy4)/6
                                        )(dt * f(t + dt, y + dy3))
                                    )(dt * f(t + dt/2, y + dy2/2))
                                )(dt * f(t + dt/2, y + dy1/2))
                            )(dt * f(t, y))


def jacobian(a, b, n, x):
    # Takes 2 matrices (a, b) and a number of iterations n to find the Jacobian
    if x is None:
        x = np.zeros(len(a[0]))
    d = np.diag(a)
    r = a - np.diagflat(d)
    for i in range(n):
        x = (b - np.dot(r, x)) / d
    return x


def stiffnessindex(sp, a, b):
    tol, order, xi, gamma = sp
    index = tol**(1/(order + 1)) *\
        np.linalg.norm(a) *\
        np.linalg.norm(b)**(-1 / (order + 1)) *\
        ((np.abs(xi)**(-1/(order + 1))) / np.abs(gamma))
    return index


# Function parameters (fp)
fa = 1
fn = 4
fp = [fa, fn]

# Stiffness index parameter values (sp)
gamma = 1
xi = 1
order = 1
tolerance = 10000
sp = tolerance, order, xi, gamma

# Matrix of b values to plot for
bm = [0, 100, 10000]

indexvalues = []
for j in bm:
    ivr = []
    xm = []
    for x in [x * 0.5 for x in range(0, 10)]:
        a, b = functionone(fp, j, x)
        ivr.append(stiffnessindex(sp, a, b))
        xm.append(x)
    indexvalues.append(ivr)

for i in range(len(bm)):
    plt.plot(xm, indexvalues[i], label='b value: {}'.format(bm[i]))
plt.legend(bbox_to_anchor=(1, 1), loc=2)
plt.title('Stiffness Index')
plt.show()
